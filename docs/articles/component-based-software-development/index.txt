1:"$Sreact.fragment"
2:I[2971,["/_next/static/chunks/ae2273c76f546f10.js"],"Header"]
3:I[39756,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"default"]
4:I[37457,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"default"]
5:I[29306,["/_next/static/chunks/ae2273c76f546f10.js","/_next/static/chunks/4703bc040350e6fb.js"],"default"]
6:I[22016,["/_next/static/chunks/ae2273c76f546f10.js"],"default"]
7:I[79520,["/_next/static/chunks/ae2273c76f546f10.js"],""]
9:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"OutletBoundary"]
b:I[11533,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"AsyncMetadataOutlet"]
d:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"ViewportBoundary"]
f:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"MetadataBoundary"]
10:"$Sreact.suspense"
12:I[68027,["/_next/static/chunks/ae2273c76f546f10.js"],"default"]
:HL["/_next/static/chunks/cc0df02d4327479b.css","style"]
:HL["/_next/static/chunks/eb89a7503d7ea580.css","style"]
:HL["/_next/static/media/asap_condensed_v17_latin_500-s.p.201eb6cb.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/ibm_plex_serif_v19_latin_500-s.p.0a408628.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/roboto_condensed_v27_latin_500-s.p.fa484095.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/satisfy_v21_latin_regular-s.p.947b27dc.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
0:{"P":null,"b":"kJIvsIcygUwkht8OuZseX","p":"","c":["","articles","component-based-software-development",""],"i":false,"f":[[["",{"children":["articles",{"children":[["slug","component-based-software-development","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/cc0df02d4327479b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/chunks/eb89a7503d7ea580.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/ae2273c76f546f10.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"data-scroll-behavior":"smooth","lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"color-scheme","content":"light dark"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                try {\n                  var theme = localStorage.getItem(\"theme\");\n                  var dark = theme === \"dark\" || (theme === \"system\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches);\n                  if (dark) {\n                    document.documentElement.classList.add(\"dark\");\n                    document.documentElement.setAttribute(\"data-theme\", \"dark\");\n                    document.documentElement.style.colorScheme = \"dark\";\n                  } else {\n                    document.documentElement.classList.remove(\"dark\");\n                    document.documentElement.setAttribute(\"data-theme\", \"light\");\n                    document.documentElement.style.colorScheme = \"light\";\n                  }\n                } catch(e) {}\n              })();\n            "}}]]}],["$","body",null,{"children":[["$","$L2",null,{}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L5",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"brand-bg brand-text sticky bottom-0 flex p-1","children":["$","div",null,{"className":"brand-page-max-width m-auto flex w-full flex-row justify-between px-4","children":[["$","div",null,{"className":"robotocond500_1477471c-module__3nXAyW__className","children":["¬© ",2025," Steve Teleki. All rights reserved."]}],["$","div",null,{"className":"privacy-footer","children":["$","$L6",null,{"href":"/articles/privacy-policy","children":["$","span",null,{"className":"robotocond500_1477471c-module__3nXAyW__className","children":"Privacy Policy"}]}]}]]}]}],["$","dialog",null,{"id":"search_modal","className":"modal","children":[["$","div",null,{"className":"modal-box w-11/12 max-w-5xl","children":[["$","h3",null,{"className":"pb-6 text-lg font-bold","children":"üß≠¬†Steve on Software Site Search"}],["$","div",null,{"id":"search","className":""}],["$","form",null,{"method":"dialog","children":["$","button",null,{"className":"btn btn-circle btn-ghost btn-sm absolute top-2 right-2","children":"‚úñÔ∏è"}]}]]}],["$","form",null,{"method":"dialog","className":"modal-backdrop","children":["$","button",null,{"children":"close"}]}]]}]]}],["$","$L7",null,{"src":"/js/nav.js"}],["$","$L7",null,{"src":"/js/katex.min.js"}],["$","$L7",null,{"src":"/pagefind/pagefind-ui.js"}],["$","$L7",null,{"src":"/js/pagefind-extra.js"}]]}]]}],{"children":["articles",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","component-based-software-development","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L8",null,["$","$L9",null,{"children":["$La",["$","$Lb",null,{"promise":"$@c"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Ld",null,{"children":"$Le"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Lf",null,{"children":["$","div",null,{"hidden":true,"children":["$","$10",null,{"fallback":null,"children":"$L11"}]}]}]]}],false]],"m":"$undefined","G":["$12",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/cc0df02d4327479b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],"$L13"]],"s":false,"S":true}
13:["$","link","1",{"rel":"stylesheet","href":"/_next/static/chunks/eb89a7503d7ea580.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
14:T151f,
<p>Of the many ways that you can build software two are used most often: based on use cases (vertical slices of end-user functionality through the system) or layers (horizontal sets of related technical functionality). Either way, when done, you'll end up with a set of cooperating components that implement the system's business.</p>
<p>The key insight is this: to build a high-quality large system you need to start with high-quality components. Take high-quality components and assemble them into the finished system.</p>
<p>To build high-quality components start with code library writing principles: make your components highly cohesive units of code that are used through well-defined interfaces; ensure that they are independently tested and versioned. A better term for these code libraries would be software parts, since they can be of varied sizes.</p>
<h2>A Structure for a Component-Based System</h2>
<p>The term component is often used generically when we speak of a software part. It helps to standardize the language when talking about component-based development. Here is one that works well:</p>
<ol>
  <li><strong>Class</strong> is an Abstract Data Type (ADT) that extends the language's vocabulary. A class is still firmly in the computer language realm.</li>
  <li><strong>Component</strong> is an abstractions from the problem domain. This is where the language of the system transitions from the computer domain to the problem domain.</li>
  <li><strong>Module</strong> and <strong>subsystem</strong> represent composite abstractions from the problem domain.</li>
</ol>
<p>Each part is built from about 5 to 10 subparts. The top part is the system. A system is built out of subsystems. Subsystems are built from modules. Modules are built from components, and components are built from classes.¬†Here is a rule of thumb for sizing these parts:</p>
<ol>
  <li>Class: 100 to 200 LOC</li>
  <li>Component: 1,000 to 2,000 LOC</li>
  <li>Module: 10,000 to 20,000 LOC</li>
  <li>Subsystem: 50,000 to 100,000 LOC</li>
  <li>System: 100,000 to 500,000 LOC</li>
</ol>
<p>Following this method of sizing and naming allows you to build a moderate sized system of about half a million lines of code. If you need to build a larger system, then build it as a set of cooperating systems. Use these ideas as a¬†starting set of terms and rules for your next component-based development effort.</p>
<h3>Update on August 8, 2010</h3>
<p>When I wrote the first version of this article, I wrote it from the perspective of a rather small team where each of us had to write more than one component that we assembled into a finished system. Therefore integration was assumed and obvious: I designed the component in a way to fit perfectly its intended use by another component that was also my work. Given that we were a small team, it was also self evident that whatever I design will have to work well when used by my teammate's component.</p>
<p>Our emphasis was on componentization. The need for integration was evident and obvious. After all, a system that doesn't integrate is no good. We were replacing the idea of building the system as a monolith with the idea of assembling the system from components.</p>
<p>Over the years I saw systems built out of components that don't come together, especially as team size grows. As a reminder, let's make sure that we heed Deming's admonition: <strong><em>"Why did the parts work together? Because they were designed to work together."</em></strong></p>
<p>It is the responsibility of each component designer to work with his or her clients to ensure that the component they design will fit the intended use. And as Dijkstra advises us: <strong><em>"programs should be composed correctly, not just debugged into correctness."</em></strong></p>
<h3>Update on March 17, 2024</h3>
<p>Building the system from <em>vertical slices</em>, or <em>features</em>, tends to be harder at first. Mostly because we are not used to working this way. The major benefit of this method is that each feature can be independently tested before being added to the system. Features can be small, a few classes, amounting to a component based on the terminology above, or they can be larger, the size of modules, or even subsystems.</p>
<p>A note on Lines of Code, or LOC: knowing the size of source code in lines of code is relevant for roughly figuring out how long will it take to read that code. When someone needs to work on any code they will have read it. If a software part has many lines of code, it will take longer to read through it, and then decide where to look to fix a defect, or to add a new capability. Knowing the size of code is also helpful in figuring out the defect density of a given part. Knowing the defect density helps in making <em>repair or replace</em> desicisions. Using LOC beyond this scope is not advised, however well intentioned.</p>
<h3>References</h3>
<ol>
  <li><a href="http://www.deming.edu/">Deming, W. Edwards</a>. <em>The Deming Videotapes</em>. MIT. Boston, MA. 1981-1983.</li>
  <li><a href="http://userweb.cs.utexas.edu/users/EWD/">Dijkstra, Edsger W.</a> <a href="http://www.youtube.com/watch?v=6sIlKP2LzbA"><em>Turing Award Lecture</em>.</a> 1972.</li>
  <li><a href="https://www.amazon.com/Modern-Software-Engineering-Discipline-Development/dp/0137314914">Farley, David. <em>Modern Software Engineering</em></a>. 2022.</li>
</ol>
8:["$","main",null,{"data-pagefind-body":true,"className":"flex flex-col","children":[["$","article",null,{"id":"article","className":"content-page grid grid-cols-1 self-center","children":[["$","div",null,{"className":"content-prose","children":["$","h1",null,{"className":"","children":"Component-Based Software Development"}]}],["$","div",null,{"className":"content-subtitle","children":""}],["$","div",null,{"className":"content-date-tags","children":["$","div",null,{"className":"brand-text-accent my-2 text-sm","children":["üóìÔ∏è",["$","span",null,{"className":"date-short px-1","children":"Oct 28, 1998"}],["$","span",null,{"className":"date-long px-1","children":"October 28, 1998"}],[["$","span",null,{"className":"pr-2"}],[["$","span","Design",{"children":["$","span",null,{"className":"inline whitespace-nowrap pr-2 leading-loose","children":["$","$L6",null,{"href":"/tags/design","children":["üè∑Ô∏è ","Design"]}]}]}]]]]}]}],["$","div",null,{"className":"content-reading-time","children":"üìñ 3 minute read"}],["$","div",null,{"className":"content-prose pt-4","dangerouslySetInnerHTML":{"__html":"$14"}}]]}],"$L15"]}]
15:["$","div",null,{"className":"pager","children":[["$","div",null,{"className":"pager-btn pager-btn-left justify-self-start","children":["$","$L6",null,{"href":"/articles/welcome","children":["$","div",null,{"className":"flex flex-row gap-2","children":[["$","div",null,{"className":"self-center","children":"‚Äπ‚Äπ"}],["$","div",null,{"className":"link-long","children":"Welcome!"}]]}]}]}],["$","div",null,{"className":"pager-btn pager-btn-right justify-self-end","children":["$","$L6",null,{"href":"/articles/version-numbers","children":["$","div",null,{"className":"flex flex-row gap-2","children":[["$","div",null,{"className":"link-long","children":"Version Numbers"}],["$","div",null,{"className":"self-center","children":"‚Ä∫‚Ä∫"}]]}]}]}]]}]
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:null
16:I[27201,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"IconMark"]
c:{"metadata":[["$","title","0",{"children":"Component-Based Software Development"}],["$","meta","1",{"name":"application-name","content":"Steve on Software"}],["$","meta","2",{"name":"author","content":"Steve Teleki"}],["$","meta","3",{"name":"generator","content":"Next.js+Unified.js"}],["$","meta","4",{"name":"keywords","content":"Design"}],["$","meta","5",{"name":"referrer","content":"origin-when-cross-origin"}],["$","meta","6",{"name":"creator","content":"Steve Teleki"}],["$","meta","7",{"name":"publisher","content":"Steve Teleki"}],["$","meta","8",{"name":"robots","content":"index, follow, nocache"}],["$","meta","9",{"name":"category","content":"technology"}],["$","meta","10",{"name":"summary","content":"Of the many ways that you can build software two are used most often: based on use cases (vertical slices of end-user functionality through the system) or layers (horizontal sets of related technical functionality). Either way, when done, you'll end up with a set of cooperating components that implement the system's business."}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"Component-Based Software Development"}],["$","meta","13",{"name":"twitter:card","content":"summary"}],["$","meta","14",{"name":"twitter:title","content":"Component-Based Software Development"}],["$","link","15",{"rel":"icon","href":"/favicon.ico?favicon.b28d3dba.ico","sizes":"256x256","type":"image/x-icon"}],["$","link","16",{"rel":"icon","href":"/icon.png?icon.5872d748.png","sizes":"180x180","type":"image/png"}],["$","link","17",{"rel":"apple-touch-icon","href":"/apple-icon.png?apple-icon.5872d748.png","sizes":"180x180","type":"image/png"}],["$","$L16","18",{}]],"error":null,"digest":"$undefined"}
11:"$c:metadata"

1:"$Sreact.fragment"
2:I[2971,["/_next/static/chunks/ae2273c76f546f10.js"],"Header"]
3:I[39756,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"default"]
4:I[37457,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"default"]
5:I[29306,["/_next/static/chunks/ae2273c76f546f10.js","/_next/static/chunks/4703bc040350e6fb.js"],"default"]
6:I[22016,["/_next/static/chunks/ae2273c76f546f10.js"],"default"]
7:I[79520,["/_next/static/chunks/ae2273c76f546f10.js"],""]
9:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"OutletBoundary"]
b:I[11533,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"AsyncMetadataOutlet"]
d:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"ViewportBoundary"]
10:I[68027,["/_next/static/chunks/ae2273c76f546f10.js"],"default"]
:HL["/_next/static/chunks/cc0df02d4327479b.css","style"]
:HL["/_next/static/chunks/eb89a7503d7ea580.css","style"]
:HL["/_next/static/media/asap_condensed_v17_latin_500-s.p.201eb6cb.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/ibm_plex_serif_v19_latin_500-s.p.0a408628.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/roboto_condensed_v27_latin_500-s.p.fa484095.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/satisfy_v21_latin_regular-s.p.947b27dc.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
0:{"P":null,"b":"kJIvsIcygUwkht8OuZseX","p":"","c":["","tags","development","simplest-interview-question",""],"i":false,"f":[[["",{"children":["tags",{"children":[["tag","development","d"],{"children":[["slug","simplest-interview-question","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/cc0df02d4327479b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/chunks/eb89a7503d7ea580.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/ae2273c76f546f10.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"data-scroll-behavior":"smooth","lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","meta",null,{"name":"color-scheme","content":"light dark"}],["$","script",null,{"dangerouslySetInnerHTML":{"__html":"\n              (function() {\n                try {\n                  var theme = localStorage.getItem(\"theme\");\n                  var dark = theme === \"dark\" || (theme === \"system\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches);\n                  if (dark) {\n                    document.documentElement.classList.add(\"dark\");\n                    document.documentElement.setAttribute(\"data-theme\", \"dark\");\n                    document.documentElement.style.colorScheme = \"dark\";\n                  } else {\n                    document.documentElement.classList.remove(\"dark\");\n                    document.documentElement.setAttribute(\"data-theme\", \"light\");\n                    document.documentElement.style.colorScheme = \"light\";\n                  }\n                } catch(e) {}\n              })();\n            "}}]]}],["$","body",null,{"children":[["$","$L2",null,{}],["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L5",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","footer",null,{"className":"brand-bg brand-text sticky bottom-0 flex p-1","children":["$","div",null,{"className":"brand-page-max-width m-auto flex w-full flex-row justify-between px-4","children":[["$","div",null,{"className":"robotocond500_1477471c-module__3nXAyW__className","children":["¬© ",2025," Steve Teleki. All rights reserved."]}],["$","div",null,{"className":"privacy-footer","children":["$","$L6",null,{"href":"/articles/privacy-policy","children":["$","span",null,{"className":"robotocond500_1477471c-module__3nXAyW__className","children":"Privacy Policy"}]}]}]]}]}],["$","dialog",null,{"id":"search_modal","className":"modal","children":[["$","div",null,{"className":"modal-box w-11/12 max-w-5xl","children":[["$","h3",null,{"className":"pb-6 text-lg font-bold","children":"üß≠¬†Steve on Software Site Search"}],["$","div",null,{"id":"search","className":""}],["$","form",null,{"method":"dialog","children":["$","button",null,{"className":"btn btn-circle btn-ghost btn-sm absolute top-2 right-2","children":"‚úñÔ∏è"}]}]]}],["$","form",null,{"method":"dialog","className":"modal-backdrop","children":["$","button",null,{"children":"close"}]}]]}]]}],["$","$L7",null,{"src":"/js/nav.js"}],["$","$L7",null,{"src":"/js/katex.min.js"}],["$","$L7",null,{"src":"/pagefind/pagefind-ui.js"}],["$","$L7",null,{"src":"/js/pagefind-extra.js"}]]}]]}],{"children":["tags",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["tag","development","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","simplest-interview-question","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L8",null,["$","$L9",null,{"children":["$La",["$","$Lb",null,{"promise":"$@c"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Ld",null,{"children":"$Le"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],"$Lf"]}],false]],"m":"$undefined","G":["$10",["$L11","$L12"]],"s":false,"S":true}
13:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"MetadataBoundary"]
14:"$Sreact.suspense"
f:["$","$L13",null,{"children":["$","div",null,{"hidden":true,"children":["$","$14",null,{"fallback":null,"children":"$L15"}]}]}]
11:["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/cc0df02d4327479b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
12:["$","link","1",{"rel":"stylesheet","href":"/_next/static/chunks/eb89a7503d7ea580.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]
e:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:null
16:T727d,
<p>Possibly the simplest software developer interview question sounds like this:</p>
<blockquote class="markdown-note">
  <p>üìù The Simplest Interview Question</p>
  <p>Please write a function that sums all natural numbers up to n.</p>
</blockquote>
<p>This seemingly simple question can tell a lot about the background and knowledge of the candidate and also how willing and ready are they to ask clarifying questions.</p>
<p>First they may ask is this really just: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML">
        <semantics>
          <mrow>
            <mn>1</mn>
            <mo>+</mo>
            <mn>2</mn>
            <mo>+</mo>
            <mi mathvariant="normal">.</mi>
            <mi mathvariant="normal">.</mi>
            <mi mathvariant="normal">.</mi>
            <mo>+</mo>
            <mi>n</mi>
          </mrow>
          <annotation encoding="application/x-tex">1 + 2 + ... + n</annotation>
        </semantics>
      </math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>?</p>
<p>A candidate with some mathematical background will ask if we are talking about N0 or N1, meaning does the set of natural numbers include 0 or is it starting with 1. Or they may state that since we are summing numbers including 0 makes no difference, so might as well start at 1.</p>
<p>Next they may ask about the other end of the range: does it include <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>n</span></span></code></span> or not? For this exercise we will include <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>n</span></span></code></span>.</p>
<p>As a rule, all candidates might be surprised by this question and may think that it is some kind of trick question, since it seems that there is a very simple solution to this. There is, or rather, there are many simple solutions. It is not a trick question. Or if you want to call it that way, the trick is that it is simple. And often the simple things are hard.</p>
<p>Once we get to this level of understanding, most candidates will provide the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>for loop</span></span></code></span> answer. It looks like this in Swift:</p>
<figure data-rehype-pretty-code-figure="">
  <pre style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff" tabindex="0" data-language="swift" data-theme="github-dark github-light"><code data-language="swift" data-theme="github-dark github-light" style="display: grid;"><span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">func</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1"> sum1</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1">n</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">Int</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">-></span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> Int</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> {</span></span>
<span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">    var</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> sum </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">=</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> 0</span></span>
<span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">    for</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> i </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">in</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> 1</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">...</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">n {</span></span>
<span data-line=""><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">      sum </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">+=</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> i</span></span>
<span data-line=""><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">    }</span></span>
<span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">    return</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> sum</span></span>
<span data-line=""><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">}</span></span></code></pre>
</figure>
<p>Once we have some code written that possibly can work, we can talk about the performance characteristics of this function. Some will know and give the answer that it is <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>O(n)</span></span></code></span>, since the performance is proportional with the input. The <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>for loop</span></span></code></span> will have to execute <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>n</span></span></code></span> times.</p>
<p>This is the point in the interview when things get a bit more interesting. I ask: ‚ÄúIs there a more <em>‚Äúfunctional‚Äù</em> way to solve this problem? Then some candidates offer that to make it <em>‚Äúfunctional‚Äù</em> they would have to use <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>map</span></span></code></span>, <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>filter</span></span></code></span>, or <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>reduce</span></span></code></span>, because that's what would make it functional. Then we can have a conversation on what is <em>‚Äúfunctional‚Äù</em> and why wouldn‚Äôt the solution provided already, <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>sum1</span></span></code></span>, would not be functional. We talk about the distinguishing characteristics of functional programming.</p>
<p>What is functional programming? A simple explanation is that it is a programming style that prefers pure functions without side effects. Pure functions depend only on their arguments, perform their computations without side effects, and return a value. A side effect is something that the function does to the outside world, like changing the value of a variable outside its scope, or writing to a disk or screen, making a network request. <sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref aria-describedby="footnote-label">1</a></sup></p>
<p>We conclude that <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>sum1</span></span></code></span> is quite functional as it is a pure function. If they want to rewrite it, then go for it. They produce a solution using the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>map</span></span></code></span> function:</p>
<figure data-rehype-pretty-code-figure="">
  <pre style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff" tabindex="0" data-language="swift" data-theme="github-dark github-light"><code data-language="swift" data-theme="github-dark github-light" style="display: grid;"><span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">func</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1"> sum2</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1">n</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">Int</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">-></span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> Int</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> {</span></span>
<span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">    var</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> sum </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">=</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> 0</span></span>
<span data-line=""><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">    Array</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">1</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">...</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">n).</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">map</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">{ i </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">in</span></span>
<span data-line=""><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">        sum </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">+=</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> i</span></span>
<span data-line=""><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">    }</span></span>
<span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">    return</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> sum</span></span>
<span data-line=""><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">}</span></span></code></pre>
</figure>
<p>Not that much different from the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>for loop</span></span></code></span>. Also, it is somewhat of a misuse of <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>map</span></span></code></span>, since <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>map</span></span></code></span> is supposed to apply a transformation to some data while maintaining its structure. But the <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>map</span></span></code></span> in sum2 does no transformation at all.</p>
<p>Next someone might provide a solution using <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>reduce</span></span></code></span>. This is more in line with the design intent for this function.</p>
<figure data-rehype-pretty-code-figure="">
  <pre style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff" tabindex="0" data-language="swift" data-theme="github-dark github-light"><code data-language="swift" data-theme="github-dark github-light" style="display: grid;"><span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">func</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1"> sum3</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1">n</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">Int</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">-></span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> Int</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> {</span></span>
<span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">    return</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> Array</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">1</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">...</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">n).</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">reduce</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">0</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">, </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">+</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">)</span></span>
<span data-line=""><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">}</span></span></code></pre>
</figure>
<p>And we arrive to recursion. Some remember that they read that in functional programming it is common practice to use recursion. They provide the following solution:</p>
<figure data-rehype-pretty-code-figure="">
  <pre style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff" tabindex="0" data-language="swift" data-theme="github-dark github-light"><code data-language="swift" data-theme="github-dark github-light" style="display: grid;"><span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">func</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1"> sum4</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1">n</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">Int</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">-></span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> Int</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> {</span></span>
<span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">    if</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> n </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">==</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> 1</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> { </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">return</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> 1</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> }</span></span>
<span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">    return</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> n </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">+</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> sum4</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">(</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">n</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">: n</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">-</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">1</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">)</span></span>
<span data-line=""><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">}</span></span></code></pre>
</figure>
<p>Once the topic of recursion comes up, we can talk about the parts of a recursive function? First is the condition for the termination of the recursion, and second the recursive call. If they don't know how to write it, I help them along as much as needed.</p>
<blockquote class="markdown-note">
  <p>üìù The value of questions that the candidate can't answer</p>
  <p>I don‚Äôt expect that every candidate would know the answers to these questions. I tend to ask questions to which I expect that they won‚Äôt know the answers. There is no malice in this. I want to see how they carry themselves when they don‚Äôt know the answers. Do they make up stuff or simply admit that they don't know and promise to find out and get back with me. In our professions we encounter situations daily where we won‚Äôt know the answers. We need to know how to handle those situations.</p>
</blockquote>
<p>Once we have at least one of the functions written I ask if they can tell me what do they consider to be the performance benefits of functional style programming?</p>
<p>Here they might recall that given that they are pure, side effect free functions, that means that for a given input they always return the same output. If that's so, then if the computation is very expensive, and the function is called often with the same input parameters, then the results can be cached.</p>
<p>This is a good place to draw some parallels to the web, like looking up a static web page. The reason we can have content delivery networks, is because those act as caches for the <em>‚Äùfunctions‚Äù</em> built into the browsers that <span data-rehype-pretty-code-figure=""><code data-language="plaintext" data-theme="github-dark github-light" style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff"><span data-line=""><span>fetch</span></span></code></span> those web pages.</p>
<p>After we bring the performance conversation to a closure, the next question tends to stun them: <em>"Is there O(1) solution to this problem?"</em> That's when the folks with some math background have an advantage. Once they recognize that this is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML">
        <semantics>
          <mrow>
            <mn>1</mn>
            <mo>+</mo>
            <mn>2</mn>
            <mo>+</mo>
            <mi mathvariant="normal">.</mi>
            <mi mathvariant="normal">.</mi>
            <mi mathvariant="normal">.</mi>
            <mo>+</mo>
            <mi>n</mi>
            <mo>=</mo>
            <mstyle mathsize="1.2em">
              <msubsup>
                <mo>‚àë</mo>
                <mstyle scriptlevel="1">
                  <mtable rowspacing="0.1em" columnalign="center" columnspacing="1em">
                    <mtr>
                      <mtd>
                        <mstyle scriptlevel="1" displaystyle="false">
                          <mrow>
                            <mi>i</mi>
                            <mo>=</mo>
                            <mn>1</mn>
                          </mrow>
                        </mstyle>
                      </mtd>
                    </mtr>
                  </mtable>
                </mstyle>
                <mi>n</mi>
              </msubsup>
              <mi>i</mi>
            </mstyle>
            <mo>=</mo>
            <mfrac>
              <mrow>
                <mi>n</mi>
                <mo stretchy="false">(</mo>
                <mi>n</mi>
                <mo>+</mo>
                <mn>1</mn>
                <mo stretchy="false">)</mo>
              </mrow>
              <mn>2</mn>
            </mfrac>
          </mrow>
          <annotation encoding="application/x-tex">1 + 2 + ... + n = {\large\sum_{\substack{i=1}}^n i} = {\frac {n(n+1)} 2}</annotation>
        </semantics>
      </math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4547em;vertical-align:-0.4926em;"></span><span class="mord"><span class="mop sizing reset-size6 size7"><span class="mop op-symbol small-op" style="position:relative;top:0em;">‚àë</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8017em;"><span style="top:-2.5027em;margin-left:0em;margin-right:0.0417em;"><span class="pstrut" style="height:2.8em;"></span><span class="sizing reset-size7 size4 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6698em;"><span style="top:-2.8102em;"><span class="pstrut" style="height:2.8em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span class="vlist-s">‚Äã</span></span><span class="vlist-r"><span class="vlist" style="height:0.1698em;"><span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.3147em;margin-right:0.0417em;"><span class="pstrut" style="height:2.8em;"></span><span class="sizing reset-size7 size4 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">‚Äã</span></span><span class="vlist-r"><span class="vlist" style="height:0.4105em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal sizing reset-size6 size7">i</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">‚Äã</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span> then they write the simplest and fastest solution of it all.</p>
<figure data-rehype-pretty-code-figure="">
  <pre style="--shiki-dark:#e1e4e8;--shiki-light:#24292e;--shiki-dark-bg:#24292e;--shiki-light-bg:#fff" tabindex="0" data-language="swift" data-theme="github-dark github-light"><code data-language="swift" data-theme="github-dark github-light" style="display: grid;"><span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">func</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1"> sum5</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">(</span><span style="--shiki-dark:#B392F0;--shiki-light:#6F42C1">n</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">: </span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">Int</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">-></span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> Int</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> {</span></span>
<span data-line=""><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">    return</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> n </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">*</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E"> (n</span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">+</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5">1</span><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">) </span><span style="--shiki-dark:#F97583;--shiki-light:#D73A49">/</span><span style="--shiki-dark:#79B8FF;--shiki-light:#005CC5"> 2</span></span>
<span data-line=""><span style="--shiki-dark:#E1E4E8;--shiki-light:#24292E">}</span></span></code></pre>
</figure>
<p>To sum it up, this simple interview question packs a big punch: allows us to have a conversation on a wide variety of computer science topics, and also allows us to see how well candidate thinks on their feet, since chances are that they don't remember or don‚Äôt know all these topics.</p>
<p>What are some of the questions that you like to ask that are deceptively simple? Drop me a line or contact me through LinkedIn.</p>
<section data-footnotes class="footnotes">
  <h2 class="sr-only" id="footnote-label">Footnotes</h2>
  <ol>
    <li id="user-content-fn-1">
      <p>Eric Normand. <em>Grokking Simplicity. Taming complex software with functional thinking</em>. Manning. 2021. <a href="#user-content-fnref-1" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">‚Ü©</a></p>
    </li>
  </ol>
</section>
8:["$","main",null,{"children":[["$","article",null,{"id":"article","className":"content-page grid grid-cols-1 self-center","children":[["$","div",null,{"className":"content-prose","children":["$","h1",null,{"className":"","children":"The Simplest Interview Question"}]}],["$","div",null,{"className":"content-subtitle","children":""}],["$","div",null,{"className":"content-date-tags","children":["$","div",null,{"className":"brand-text-accent my-2 text-sm","children":["üóìÔ∏è",["$","span",null,{"className":"date-short px-1","children":"Jan 23, 2024"}],["$","span",null,{"className":"date-long px-1","children":"January 23, 2024"}],[["$","span",null,{"className":"pr-2"}],[["$","span","Development",{"children":["$","span",null,{"className":"inline whitespace-nowrap pr-2 leading-loose","children":["$","$L6",null,{"href":"/tags/development","children":["üè∑Ô∏è ","Development"]}]}]}],["$","span","Interview",{"children":["$","span",null,{"className":"inline whitespace-nowrap pr-2 leading-loose","children":["$","$L6",null,{"href":"/tags/interview","children":["üè∑Ô∏è ","Interview"]}]}]}],["$","span","People",{"children":["$","span",null,{"className":"inline whitespace-nowrap pr-2 leading-loose","children":["$","$L6",null,{"href":"/tags/people","children":["üè∑Ô∏è ","People"]}]}]}]]]]}]}],["$","div",null,{"className":"content-reading-time","children":"üìñ 6 minute read"}],["$","div",null,{"className":"content-prose pt-4","dangerouslySetInnerHTML":{"__html":"$16"}}]]}],"$L17"]}]
17:["$","div",null,{"className":"pager","children":[["$","div",null,{"className":"pager-btn pager-btn-left justify-self-start","children":["$","$L6",null,{"href":"/tags/development/embracing-simplicity","children":["$","div",null,{"className":"flex flex-row gap-2","children":[["$","div",null,{"className":"self-center","children":"‚Äπ‚Äπ"}],["$","div",null,{"className":"link-long","children":"Embracing Simplicity"}]]}]}]}],["$","div",null,{"className":"pager-btn pager-btn-right justify-self-end","children":["$","$L6",null,{"href":"/tags/development/two-rectangles-prototype-story","children":["$","div",null,{"className":"flex flex-row gap-2","children":[["$","div",null,{"className":"link-long","children":"Two Rectangles: A Prototype Story"}],["$","div",null,{"className":"self-center","children":"‚Ä∫‚Ä∫"}]]}]}]}]]}]
18:I[27201,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/bf5f4fcdb6d9e318.js"],"IconMark"]
c:{"metadata":[["$","title","0",{"children":"Steve on Software"}],["$","meta","1",{"name":"description","content":"Steve on software development, management, people, technology, organizations, and business."}],["$","meta","2",{"name":"application-name","content":"Steve on Software"}],["$","meta","3",{"name":"author","content":"Steve Teleki"}],["$","meta","4",{"name":"generator","content":"Next.js+Unified.js"}],["$","meta","5",{"name":"keywords","content":"development,management,people,technology,software,organizations,software business"}],["$","meta","6",{"name":"referrer","content":"origin-when-cross-origin"}],["$","meta","7",{"name":"creator","content":"Steve Teleki"}],["$","meta","8",{"name":"publisher","content":"Steve Teleki"}],["$","meta","9",{"name":"robots","content":"index, follow, nocache"}],["$","meta","10",{"name":"category","content":"technology"}],["$","meta","11",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","12",{"property":"og:title","content":"Steve on Software"}],["$","meta","13",{"property":"og:description","content":"Steve on software development, management, people, technology, organizations, and business."}],["$","meta","14",{"property":"og:url","content":"https://steve.teleki.net/"}],["$","meta","15",{"property":"og:site_name","content":"Steve on Software"}],["$","meta","16",{"property":"og:locale","content":"en_US"}],["$","meta","17",{"property":"og:type","content":"website"}],["$","meta","18",{"name":"twitter:card","content":"summary"}],["$","meta","19",{"name":"twitter:title","content":"Steve on Software"}],["$","meta","20",{"name":"twitter:description","content":"Steve on software development, management, people, technology, organizations, and business."}],["$","link","21",{"rel":"icon","href":"/favicon.ico?favicon.b28d3dba.ico","sizes":"256x256","type":"image/x-icon"}],["$","link","22",{"rel":"icon","href":"/icon.png?icon.5872d748.png","sizes":"180x180","type":"image/png"}],["$","link","23",{"rel":"apple-touch-icon","href":"/apple-icon.png?apple-icon.5872d748.png","sizes":"180x180","type":"image/png"}],["$","$L18","24",{}]],"error":null,"digest":"$undefined"}
15:"$c:metadata"
